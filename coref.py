import osimport timeimport datetimefrom sklearn.feature_extraction import DictVectorizerfrom sklearn.linear_model import LogisticRegressionfrom sklearn.metrics import f1_scorefrom sklearn import treefrom file_level import Filedef get_files(path, extension):    paths = []    for root, dirs, files in os.walk(path):        for file in files:            if file.endswith(extension):                paths.append(os.path.join(root, file))    return pathsdef get_features(path, extension):    paths = get_files(path, extension)    count = 0    X_y = []    for path in paths:        count += 1        if count % 1 == 0:            print("{} out of {} files converted".format(count, len(paths)))        f = File(path)        X_y.extend(f.get_features())    return X_ydef merge(category, output_file):    files = os.path.join('conll-2012', category, 'english', 'annotations')    paths = get_files(files, "gold_conll")    with open(output_file, 'w') as f:        for p in paths:            x = open(p, 'r')            f.write(x.read())start_time = time.time()train = os.path.join('conll-2012', 'train', 'english', 'annotations')dev = os.path.join('conll-2012', 'dev', 'english', 'annotations')test = os.path.join('conll-2012', 'test', 'english', 'annotations')vec = DictVectorizer()print("Start converting training set...")X_y_train = get_features(train, "auto_conll")print([x for x, y in X_y_train])X_train = vec.fit_transform([x for x, y in X_y_train])y_train = [y for x, y in X_y_train]print(X_train)print(y_train)print("Start converting dev set...")X_y_dev = get_features(dev, "auto_conll")X_dev = vec.transform([x for x, y in X_y_dev])y_dev = [y for x, y in X_y_dev]print("Finished. Time: {}".format(datetime.timedelta(seconds=round(time.time() - start_time))))start_time = time.time()print("Start training LR...")clf = LogisticRegression()model = clf.fit(X_train, y_train)y_pred = model.predict(X_dev)print("Finished. Time: {}".format(datetime.timedelta(seconds=round(time.time() - start_time))))print("F1 score on dev set: {0:.3g}".format(f1_score(y_dev, y_pred, average='macro')))start_time = time.time()print("Start training DT...")clf2 = tree.DecisionTreeClassifier()clf2.fit(X_train, y_train)y_pred = clf2.predict(X_dev)print("Finished. Time: {}".format(datetime.timedelta(seconds=round(time.time() - start_time))))print("F1 score on dev set: {0:.3g}".format(f1_score(y_dev, y_pred, average='macro')))gen_test = Falseif gen_test:    start_time = time.time()    print("start generating combined gold test file: test_gold and predicted files")    # merge('test', 'test_gold')    f = File('test_gold')    f.predict(model, vec, 'test_pred')    print("Finished. Time: {}".format(datetime.timedelta(seconds=round(time.time() - start_time))))